////
/// @group n-ui mixins
////

/// Critical block
/// @output A critical block start comment
@mixin nUiCritical($feature-name: null) {
	@include nUiCriticalStart($feature-name);
	@content;
	@include nUiCriticalEnd($feature-name);
}

/// Critical block start
/// @output A critical block start comment
@mixin nUiCriticalStart($feature-name: null) {
	@if $_n-ui-output-critical and if($feature-name, nUiFeatureValue($feature-name) == 'critical', true) {
		@if $_n-ui-variant {
			/*! start:head-#{$_n-ui-variant}.css*/
		} @else {
			/*! start:head.css*/
		}
	}
}

/// Critical block end
/// @output A critical block start comment
@mixin nUiCriticalEnd($feature-name: null) {
	@if $_n-ui-output-critical and if($feature-name, nUiFeatureValue($feature-name) == 'critical', true) {
		@if $_n-ui-variant {
			/*! end:head-#{$_n-ui-variant}.css*/
		} @else {
			/*! end:head.css*/
		}
	}
}

/// Include rules for IE8 only block
/// @content
@mixin nUiIe8Only () {
	@if variable-exists('_n-ui-is-ie8') or $o-grid-ie8-rules == 'only' {
		@content
	}
}

/// Exclude rules from IE8 block
/// @content
@mixin nUiNotIe8 () {
	@if not (variable-exists('_n-ui-is-ie8') or $o-grid-ie8-rules == 'only') {
		@content
	}
}

/// Configure n-ui
/// @output none
@mixin nUiConfigure($features: (), $preset: null, $output-critical: false, $variant: null) {
	@if $_n-ui-configured == true {
		@error 'nUiConfigure must only be called once';
	}

	@if $preset {
		$presetFeatures: map-get($_n-ui-presets, $preset);
		$_n-ui-features: map-merge($_n-ui-features, $presetFeatures) !global;
	}

	$_n-ui-configured: true !global;
	$_n-ui-output-critical: $output-critical !global;
	$_n-ui-variant: $variant !global;
	$_n-ui-features: map-merge($_n-ui-features, $features) !global;

	// if any required feature has a dependency, require them
	@each $feature-name, $feature-deps in $_n-ui-feature-dependenices {
		@if map-has-key($_n-ui-features, $feature-name) {
			@each $feature-dep in $feature-deps {
				// if it's already 'critical', don't go lower
				@if map-get($_n-ui-features, $feature-dep) != 'critical' {
					// set it to the same level as the dependent feature
					$_n-ui-features: map-merge($_n-ui-features, ($feature-dep: map-get($_n-ui-features, $feature-name))) !global;
				}
			}
		}
	}
}

/// Add a single feature, e.g. 'buttons', 'forms'
/// @output none
@mixin nUiAddFeature($feature-name, $feature-value: true) {
	$_n-ui-features: map-merge($_n-ui-features, ($feature-name: $feature-value)) !global;
}


/// Debug comment
/// @output A loud comment listing configured n-ui features
@mixin nUiConfigureDebug() {
	/*! n-ui features: #{inspect($_n-ui-features)} */
}

/// Pinstripe background
/// @param {Color} $background
/// @param {Color} $foreground
/// @param {String} $style - 'tight' or 'loose'
/// @output A repeating linear gradient background
@mixin nUiPinstripeBG($background: gray, $foreground: rgba(0, 0, 0, 0.2), $style: 'tight') {
	background-color: $background;

	// complex: these values are throughly tested to check for strobing.
	// complex: setting the bg size avoids rounding errors that cause odd strobing.
	@if $style == 'tight' {
		background-image: repeating-linear-gradient(
			135deg,
			$foreground 0,
			$foreground 1.5px,
			transparent 1.5px,
			transparent 3px
		);
		background-size: 4px 4px;
	}

	@if $style == 'loose' {
		background-image: repeating-linear-gradient(
			135deg,
			transparent 0,
			transparent 1px,
			$foreground 1px,
			$foreground 2px,
			transparent 2px,
			transparent 5px
		);
		background-size: 7px 7px;
	}
}

/// Crosshatch background
/// @deprecated
@mixin nCrosshatchBG($args...) {
	@warn '`nCrosshatchBG` has been deprecated, use `nUiPinstripeBG` instead';
	@include nUiPinstripeBG($args...);
}
